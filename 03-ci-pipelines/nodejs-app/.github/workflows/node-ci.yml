name: Node.js CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: ['03-ci-pipelines/nodejs-app/**']
  pull_request:
    branches: [ main ]
    paths: ['03-ci-pipelines/nodejs-app/**']

defaults:
  run:
    working-directory: 03-ci-pipelines/nodejs-app

jobs:
  # Code quality and linting
  lint:
    runs-on: ubuntu-latest
    name: Code Quality Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 03-ci-pipelines/nodejs-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check Prettier formatting
        run: npm run format:check

  # Testing with multiple Node.js versions
  test:
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    name: Test (Node.js ${{ matrix.node-version }})
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 03-ci-pipelines/nodejs-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          file: ./03-ci-pipelines/nodejs-app/coverage/lcov.info
          flags: nodejs
          name: nodejs-coverage

  # Security audit
  security:
    runs-on: ubuntu-latest
    name: Security Audit
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 03-ci-pipelines/nodejs-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level high
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Build and package
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    name: Build Application
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 03-ci-pipelines/nodejs-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci --only=production
      
      - name: Create production build
        run: |
          mkdir -p dist
          cp -r . dist/
          cd dist && npm prune --production
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nodejs-app-${{ github.sha }}
          path: 03-ci-pipelines/nodejs-app/dist/
          retention-days: 7

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    needs: build
    name: Integration Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 03-ci-pipelines/nodejs-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Start application
        run: |
          npm start &
          sleep 5
      
      - name: Run health check
        run: |
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:3000/ || exit 1
          curl -f http://localhost:3000/api/users || exit 1
      
      - name: Stop application
        run: pkill -f "node index.js" || true

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build, integration, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    name: Deploy to Production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: nodejs-app-${{ github.sha }}
          path: ./app
      
      - name: Deploy application
        run: |
          echo "ðŸš€ Deploying Node.js application..."
          echo "ðŸ“¦ Artifact downloaded and ready for deployment"
          echo "âœ… Deployment completed successfully!"
          # Add your actual deployment commands here